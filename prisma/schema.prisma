generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  birthday    DateTime
  password    String
  createdAt   DateTime     @default(now())

 parentId    String?
parent      Parent?       @relation(fields: [parentId], references: [id])
  classId     Int?
  class       Class?        @relation(fields: [classId], references: [id])

  gradeId     Int?
  grade       Grade?        @relation(fields: [gradeId], references: [id])

  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  birthday  DateTime
  password  String
  createdAt DateTime  @default(now())

  subjects  Subject[] 
  lessons   Lesson[]
  classes   Class[]

  Subject Subject[] @relation("SubjectTeachers")
}

model Parent {
  id          String       @id 
  username  String    @unique
  name      String
  surname   String
  email       String    @unique
  phone       String
  address     String
  bloodType   String
  sex         String
  birthday    DateTime
  occupation  String?
  emergencyContact String?
  nationality      String?
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  relationship String
  students    Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Class {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  capacity      Int
  supervisorId  String?
  supervisor    Teacher?      @relation(fields: [supervisorId], references: [id])
  gradeId       Int?
  grade         Grade?         @relation(fields: [gradeId], references: [id])
  students      Student[]
  lessons       Lesson[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       String      @id @default(uuid())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]

  Teacher Teacher[] @relation("SubjectTeachers")
}

model Lesson {
  id        String   @id @default(uuid())
  name      String
  startTime DateTime
  endTime   DateTime?
  day       String?
  subjectId String
  teacherId String
  classId   Int      // Change this to `Int` to match the `Class` model's `id` type
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  class     Class    @relation(fields: [classId], references: [id]) // Ensure this relation is consistent

  exams       Exam[] 
  assignments Assignment[]
  attendances Attendance[]
}


model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId  String  // Change from Int to String
  lesson    Lesson  @relation(fields: [lessonId], references: [id])

  results   Result[]
}


model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId String  // Change from Int to String
  lesson   Lesson  @relation(fields: [lessonId], references: [id])

  results   Result[]
}

model Result {
  id           Int        @id @default(autoincrement())
  score        Int

  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])

  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  lessonId String  // Change from Int to String
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
