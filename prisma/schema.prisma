generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  birthday    DateTime
  password    String
  createdAt   DateTime     @default(now())
  parentId    String?
  classId     Int?
  gradeId     Int?
  attendances Attendance[]
  results     Result[]
  class       Class?       @relation(fields: [classId], references: [id])
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  parent      Parent?      @relation(fields: [parentId], references: [id])

}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  birthday  DateTime
  password  String
  createdAt DateTime  @default(now())
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id               String    @id
  username         String    @unique
  name             String
  surname          String
  email            String    @unique
  phone            String
  address          String
  bloodType        String
  sex              String
  birthday         DateTime
  occupation       String?
  emergencyContact String?
  nationality      String?
  password         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  relationship     String
  students         Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  grade    String
  level    Float     @unique
  classes  Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int?
  announcements Announcement[]
  grade         Grade?         @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]

  Billing Billing[]
}

model Subject {
  id         String       @id @default(uuid())
  name       String       @unique
  startTime  DateTime?
  endTime    DateTime?
  Assignment Assignment[]
  lessons    Lesson[]
  teachers   Teacher[]    @relation("SubjectToTeacher")
}

model Lesson {
  id          String       @id @default(uuid())
  startTime   DateTime
  endTime     DateTime
  day         String[]
  subjectId   String
  teacherId   String
  classId     Int
  Assignment  Assignment[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  String?
  subjectId String
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  grade        String
  studentId    String
  examId       Int?
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  checkInTime  DateTime
  checkOutTime DateTime?
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  deviceId  String?     // Foreign key to Device
  device    Device?     @relation(fields: [deviceId], references: [deviceId])
}

model Device {
  id          String       @id @default(uuid()) // UUID for internal reference
  deviceId    String       @unique              // External or custom device ID
  name        String?
  createdAt   DateTime     @default(now())
  attendances Attendance[] // Relation to Attendance
}


model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}
model Billing {
  id          String   @id @default(uuid())
  billName    String   // Name of the bill (e.g., Tuition Fee)
  month       String   // Month for which the bill is generated
  amount      Float    // Bill amount
  dueDate     DateTime // Due date for payment
  description String   // Description of the bill
   classId     Int?     // Ensure this field exists (nullable if needed)
  class       Class?   @relation(fields: [classId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  payments    Payment[]
}
model Payment {
  id            String   @id @default(uuid())
  transactionId String
  image         String   // Store image URL or path
  billingId     String   // FK to Billing
  billing       Billing  @relation(fields: [billingId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
